import { 
    UserPoolClient,
    UserPool, 
    CfnIdentityPool }           from "aws-cdk-lib/aws-cognito"

import { Construct }            from "constructs"
import { CfnOutput }            from 'aws-cdk-lib'
import { 
    Role,
    FederatedPrincipal, 
    PolicyStatement,
    Effect}            from 'aws-cdk-lib/aws-iam'



export class IdentityPoolWrapper {

    private scope               : Construct
    private userPool            : UserPool
    private userPoolClient      : UserPoolClient
    private identityPool        : CfnIdentityPool
    private authenticatedRole   : Role
    private unauthenticatedRole : Role
    private adminRole           : Role

    constructor (scope: Construct, userPool: UserPool, userPoolClient: UserPoolClient) {

        this.scope = scope
        this.userPool = userPool
        this.userPoolClient = userPoolClient
        this.initialize()
    }

    private initialize() {

        this.initializeIdentityPool()
        this.initializeIAMAuthenticatedRole()
        this.initializeIAMUnauthenticatedRole()
        this.initializeAdminRole()

    }

    private initializeIdentityPool() {

        this.identityPool = new CfnIdentityPool(this.scope, "SpaceIdentityPool", {
            allowUnauthenticatedIdentities: true,
            identityPoolName: "SpaceIdentityPool",
            cognitoIdentityProviders: [{
                clientId: this.userPoolClient.userPoolClientId,
                providerName: this.userPool.userPoolProviderName
            }]
            
        })

        new CfnOutput(this.scope, "IdentityPoolId", {
            value: this.identityPool.ref
        } )

    }

    // To setup IAM roles, we looked into the trust relationship in the console when we created the users manually
    // Roles have been automatically generated by AWS when users have been created 
    private initializeIAMAuthenticatedRole() {

        this.authenticatedRole = new Role(this.scope, "CognitoDefaultAuthenticatedRole", {
            assumedBy: new FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": this.identityPool.ref
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated"
                }
            },
            "sts:AssumeRoleWithWebIdentity" // taken from policy document -> action of the role
            )
        })

        //this.authenticatedRole.addToPolicy

    }

    private initializeIAMUnauthenticatedRole() {
        this.unauthenticatedRole = new Role(this.scope, "CognitoDefaultUnauthenticatedRole", {
            assumedBy: new FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": this.identityPool.ref
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "unauthenticated"
                }
            },
            "sts:AssumeRoleWithWebIdentity" // taken from policy document -> action of the role
            )
        })

        //this.unauthenticatedRole.addToPolicy
    }

    private initializeAdminRole() {
        this.adminRole = new Role(this.scope, "CognitoDefaultAuthenticatedRole", {
            assumedBy: new FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": this.identityPool.ref
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated"
                }
            },
            "sts:AssumeRoleWithWebIdentity" // taken from policy document -> action of the role
            )
        })

        this.adminRole.addToPolicy(new PolicyStatement({
            effect: Effect.ALLOW,
            actions: [
                "s3:ListAllMyBuckets"
            ],
            resources: ["*"]           
        }

        ))
        
    }


}